/*
*   module to store cue data that can be accessed later.
*/

import { sha1 } from "./interface/sha1";

class AssetStore {
	
	/* module flags */
	private readonly VERBOSE: boolean = false;
	
	/* module variables */
	private _totalTracks: number = 0;
	private _tracks: any = new Map();
	private _tracksMeta: any = new Map();
	
	/* performance variables */
	private readonly STOREREAD: string = "StoreRead";
	private readonly STOREWRITE: string = "StoreWrite";
	private readonly STOREMETAREAD: string = "StoreMetaRead";
	private perf: any;
	
	constructor(options: any, perf: any) {
		
		if(options && options.hasOwnProperty("verbose")) {
			
			this.VERBOSE = options.verbose;
			
		}
		
		console.log("STORE::STARTING");
		
		this.perf = perf;
		
	}
	
	/* loads cue track into storage */
	/* @param {string} shakey - sha1 key used to reference an asset. */
	/* @param {any} assetData - an assets cue style data. */
	loadTrack(shakey: sha1, assetData: any) {
		
		this._tracks.set(shakey, assetData.cueTrack);
		
		this._totalTracks + assetData.cueTrack.length;
		
		this._tracksMeta.set(shakey, assetData.cueTrackMeta);
		
		this.perf.hit(this.STOREWRITE);
		
		if(this.VERBOSE) {
			
			console.log("STORE::LOAD:", shakey.hex);
			
		}
		
	}
	
	/* remove track from the store module. */
	/* @param {string} shakey - sha1 key used to reference an asset. */
	dumpTrack(shakey: sha1) {
		
		this._tracks.delete(shakey);
		
		this._tracksMeta.delete(shakey);
		
		if(this.VERBOSE) {
			
			console.log("STORE::DUMP:", shakey.hex);
			
		}
		
	}
	
	/* fetch cue data from storage */
	/* @param {sha1} shakey - sha1 key object used to reference an asset. */
	/* @param {number} cueIndex - the index of the cue to be returned. */
	getCue(shakey: sha1,  cueIndex: number) {
		
		let track = this._tracks.get(shakey); 
		
		this.perf.hit(this.STOREREAD);
		
		if(cueIndex >= 0) {
			
			return track[cueIndex];
			
		} else {
			
			return -1;
			
		}
	}
	
	/* fetch an assets meta data. */
	/* @param {sha1} shakey - sha1 key object used to reference an asset. */
	getMeta(shakey: sha1) {
		
		return this._tracksMeta.get(shakey);
		
	}
	
	/* parse a target query string into a target object.  */
	/* @param {string} qryStr - a string containing targetting  */
	queryTargets(qryStr: string) {
		
		return this._parseTargetQuery(qryStr);
		
	}
	
	/* start to parse a query target string. */
	/* @param {string} qryStr - a string containing targetting  */
	private _parseTargetQuery(qryStr:string) {
		
		// create object with some parameters to guide parsing.
		let qryInfo = {
			sourceQuery: qryStr,
			query: qryStr.trim().split(" ")[0],
			maxRank: 0,
			deviceIndex: qryStr.indexOf('@'),
			deviceCheck: (qryStr.indexOf('@') >= 0),
			deviceValid: false,
			idIndex: qryStr.indexOf('#'),
			idCheck: (qryStr.indexOf('#') >= 0),
			idValid: false,
			classIndex: qryStr.indexOf('.'),
			classCheck: (qryStr.indexOf('.') >= 0),
			classValid: false
		}
		
		let targetObj = {
			device: null,
			id: null,
			class: null,
			maxRank: 0
		};
		
		this._validateQuery(qryInfo);
		
		if( !((qryInfo.deviceValid || !qryInfo.deviceCheck) 
			&& (qryInfo.idValid || !qryInfo.idCheck) 
			&& (qryInfo.classValid || !qryInfo.classCheck))) {
			
			console.log('MANAGER::TARGET_QUERY: query failed to be validated.');
			
		} else {
			
			this._parseDevice(qryInfo, targetObj);
			
			this._parseId(qryInfo, targetObj);
			
			this._parseClasses(qryInfo, targetObj);
			
			targetObj.maxRank = qryInfo.maxRank;
			
			console.log(targetObj);
			
		}
		
		return targetObj;
		
	}
	
	/* validates the info generated about a target query is valid. */
	/* uses some simple string checks to figure out roughly the contents. */
	/* @param {any} qryInfo - information about the target query. generated by _validateQuery. */
	/* @param {any} targetObj - an object to store results in about the target query. */
	private _validateQuery(qryInfo:any) {
		
		if(qryInfo.deviceCheck || qryInfo.idCheck || qryInfo.classCheck) {
			
			// validate the device target structure.
			if(qryInfo.deviceCheck) {
				if(qryInfo.idCheck) {
					if(qryInfo.deviceIndex <= qryInfo.idIndex) {
						qryInfo.deviceValid = true;
					}
				} else if(qryInfo.classCheck) {
					if(qryInfo.deviceIndex <= qryInfo.classIndex) {
						qryInfo.deviceValid = true;
					}
				} else if(!qryInfo.idCheck && !qryInfo.classCheck){
					if(qryInfo.deviceIndex >= 0) {
						qryInfo.deviceValid = true;
					}
				}
			}
			
			// validate the id target structure.
			if(qryInfo.idCheck) {
				if(qryInfo.classCheck) {
					if(qryInfo.idIndex <= qryInfo.classIndex) {
						qryInfo.idValid = true;
					}
				} else if(!qryInfo.deviceCheck && !qryInfo.classCheck) {
					if(qryInfo.idIndex >= 0) {
						qryInfo.idValid = true;
					}
				}
			}
			
			// validate the class target structure.
			if(qryInfo.classCheck) {
				if(qryInfo.classIndex >= qryInfo.deviceIndex && qryInfo.classIndex >= qryInfo.idIndex) {
					qryInfo.classValid = true;
				}
			}
			
		}
		
	}
	
	/* parse out the device type of the target query. */
	/* @param {any} qryInfo - information about the target query. generated by _validateQuery. */
	/* @param {any} targetObj - an object to store results in about the target query. */
	private _parseDevice(qryInfo: any, targetObj: any) {
		
		if(qryInfo.deviceCheck && qryInfo.deviceValid) {
			
			if(qryInfo.idCheck) {
				
				targetObj.device = qryInfo.query.slice(0, qryInfo.idIndex);
				
				qryInfo.maxRank += 10;
				
				qryInfo.query = qryInfo.query.slice(qryInfo.idIndex, qryInfo.query.length);
				
			}
			
			if(qryInfo.classCheck && !qryInfo.idCheck) {
				
				targetObj.device = qryInfo.query.slice(0, qryInfo.classIndex);
				
				qryInfo.maxRank += 10;
				
				qryInfo.query = qryInfo.query.slice(qryInfo.classIndex, qryInfo.query.length);
				
			} 
			
			if(!qryInfo.classCheck && !qryInfo.idCheck) {
				
				targetObj.device = qryInfo.query;
				
				qryInfo.maxRank += 10;
				
			}
			
		}
		
	}
	
	/* parse out the ID of the target query. */
	/* @param {any} qryInfo - information about the target query. generated by _validateQuery. */
	/* @param {any} targetObj - an object to store results in about the target query. */
	private _parseId(qryInfo: any, targetObj: any) {
		
		// parse id target
		if(qryInfo.idCheck && qryInfo.idValid) {
			
			qryInfo.idIndex = qryInfo.query.indexOf('#');
			qryInfo.classIndex = qryInfo.query.indexOf('.');
			
			if(qryInfo.classCheck) {
				
				targetObj.id = qryInfo.query.slice(0, qryInfo.classIndex);
				
				qryInfo.maxRank += 100;
				
				qryInfo.query = qryInfo.query.slice(qryInfo.classIndex, qryInfo.query.length);
				
			}
			
			if(!qryInfo.deviceCheck && !qryInfo.classCheck) {
				
				targetObj.id = qryInfo.query;
				
				qryInfo.maxRank += 100;
				
			}
			
		}
		
	}
	
	/* parse out the classes of the target query. */
	/* @param {any} qryInfo - information about the target query. generated by _validateQuery. */
	/* @param {any} targetObj - an object to store results in about the target query. */
	private _parseClasses(qryInfo: any, targetObj: any) {
		
		if(qryInfo.classCheck && qryInfo.classValid) {
			
			targetObj.class = qryInfo.query.split('.').slice(1);
			
			qryInfo.maxRank += targetObj.class.length;
			
		}
		
	}
	
}

export = AssetStore;